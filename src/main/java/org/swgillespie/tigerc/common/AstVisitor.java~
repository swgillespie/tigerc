package org.swgillespie.tigerc.common;

import org.swgillespie.tigerc.ast.*;

/**
 * Created by sean on 3/2/15.
 */
public interface AstVisitor {
    public void enter(ArrayAccessNode node)
    public void enter(ArrayCreationExpressionNode node) {
    public void enter(ArrayTypeNode node) {
    public void enter(AssignmentNode node) {
    public void enter(BreakNode node) {
    public void enter(CallExpressionNode node) {
    public void enter(ConditionalExpressionNode node) {
    public void enter(DeclarationNode node) {
    public void enter(ExpressionNode node) {
    public void enter(FieldAccessNode node) {
    public void enter(FieldCreationNode node) {

    }

    @Override
    public void enter(FieldDeclarationNode node) {

    }

    @Override
    public void enter(ForExpressionNode node) {

    }

    @Override
    public void enter(FunctionDeclarationNode node) {

    }

    @Override
    public void enter(IdentifierNode node) {

    }

    @Override
    public void enter(IdentifierTypeNode node) {

    }

    @Override
    public void enter(InfixExpressionNode node) {

    }

    @Override
    public void enter(IntegerLiteralNode node) {

    }

    @Override
    public void enter(LetExpressionNode node) {

    }

    @Override
    public void enter(LValueNode node) {

    }

    @Override
    public void enter(NegationExpressionNode node) {

    }

    @Override
    public void enter(NilNode node) {

    }

    @Override
    public void enter(RecordCreationExpressionNode node) {

    }

    @Override
    public void enter(RecordTypeNode node) {

    }

    @Override
    public void enter(SequenceExpressionNode node) {

    }

    @Override
    public void enter(StringLiteralNode node) {

    }

    @Override
    public void enter(TypeDeclarationNode node) {

    }

    @Override
    public void enter(TypeNode node) {

    }

    @Override
    public void enter(VariableDeclarationNode node) {

    }

    @Override
    public void enter(WhileExpressionNode node) {

    }

    @Override
    public void exit(ArrayAccessNode node) {

    }

    @Override
    public void exit(ArrayCreationExpressionNode node) {

    }

    @Override
    public void exit(ArrayTypeNode node) {

    }

    @Override
    public void exit(AssignmentNode node) {

    }

    @Override
    public void exit(BreakNode node) {

    }

    @Override
    public void exit(CallExpressionNode node) {

    }

    @Override
    public void exit(ConditionalExpressionNode node) {

    }

    @Override
    public void exit(DeclarationNode node) {

    }

    @Override
    public void exit(ExpressionNode node) {

    }

    @Override
    public void exit(FieldAccessNode node) {

    }

    @Override
    public void exit(FieldCreationNode node) {

    }

    @Override
    public void exit(FieldDeclarationNode node) {

    }

    @Override
    public void exit(ForExpressionNode node) {

    }

    @Override
    public void exit(FunctionDeclarationNode node) {

    }

    @Override
    public void exit(IdentifierNode node) {

    }

    @Override
    public void exit(IdentifierTypeNode node) {

    }

    @Override
    public void exit(InfixExpressionNode node) {

    }

    @Override
    public void exit(IntegerLiteralNode node) {

    }

    @Override
    public void exit(LetExpressionNode node) {

    }

    @Override
    public void exit(LValueNode node) {

    }

    @Override
    public void exit(NegationExpressionNode node) {

    }

    @Override
    public void exit(NilNode node) {

    }

    @Override
    public void exit(RecordCreationExpressionNode node) {

    }

    @Override
    public void exit(RecordTypeNode node) {

    }

    @Override
    public void exit(SequenceExpressionNode node) {

    }

    @Override
    public void exit(StringLiteralNode node) {

    }

    @Override
    public void exit(TypeDeclarationNode node) {

    }

    @Override
    public void exit(TypeNode node) {

    }

    @Override
    public void exit(VariableDeclarationNode node) {

    }

    @Override
    public void exit(WhileExpressionNode node) {

    }
}
